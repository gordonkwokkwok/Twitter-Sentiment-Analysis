# 1. Speacified quarters that you want to search for

start_date = pd.to_datetime(input("Please input the start date in this format: yyyy-mm-dd"))
numbers_of_quarter = int(input("Numbers of quarter: "))

start_date_list=[]
end_date_list=[]

for i in range(0, numbers_of_quarter*3, 3):
    x = start_date + relativedelta(months=i)
    y = start_date + relativedelta(months=i+3) - timedelta(days=1)
    start_date_list.append(x)
    end_date_list.append(y)
    print(f'{x.year}_Q{x.quarter}  |  Start:{x.date()}  |  End:{y.date()}')
    print('-----------------------------------------------------------') 
print(f'During the period between {start_date.date()} and {end_date_list[-1].date()}, there are {numbers_of_quarter} quarters in total.')


# Random date solution

nubmer_of_random_day = int(input('Number of random day: '))
start_everyday_list=[]
for i in range(int(len(start_date_list))):
    for k in range(nubmer_of_random_day):
        start_everyday_list.append(radar.random_datetime(start_date_list[i].date()+timedelta(days=1), stop=end_date_list[i].date()-timedelta(days=1)))

print('---------------------------------------------------------------------------------------------------') 
print(f'| There are {numbers_of_quarter} quarters. For each quarter, there are {nubmer_of_random_day} random days. Total number of days = {len(start_everyday_list)} |')
print('---------------------------------------------------------------------------------------------------') 

for i in start_everyday_list:
    print(f'{i.year}_Q{pd.Timestamp(i).quarter}  |  start_date: {i}')
